---
- name: Perform the initial setup of the bastion host
  hosts: bastion
  remote_user: root
  vars:
    pf_bruteforce_table_f: "/var/db/pf/ssh_bruteforce.table"
  tasks:
    - name: Configure the host's firewall for its bastion role
      block:
        - name: Create the subdir for {{ pf_bruteforce_table_f }} if missing
          ansible.builtin.file:
            path: "{{ pf_bruteforce_table_f | dirname }}"
            state: directory

        - name: Create the {{ pf_bruteforce_table_f }} file itself if missing
          ansible.builtin.file:
            path: "{{ pf_bruteforce_table_f }}"
            state: touch

        - name: Copy the PF configuration file over to the host
          ansible.builtin.copy:
            src: ./files/pf.conf
            dest: /etc/pf.conf
            backup: true
            validate: /sbin/pfctl -n -f %s

        - name: Reload the PF configuration
          ansible.builtin.command:
            cmd: /sbin/pfctl -f /etc/pf.conf

        # TODO: add tasks for dumping the <ssh_bruteforce> table to the
        #       corresponding file on reboot, perhaps even expire the table
        #       entries, as per the rather nice write up at:
        #
        #       https://www.bsdhowto.ch/savepftables.html

    - name: Apply available OpenBSD patches and update installed packages
      block:
        - name: Apply the patches, if found, and store module returns
          community.general.syspatch:
          register: syspatch_module_retvals

        - name: Output the return values of the syspatch module
          ansible.builtin.debug:
            var: output_syspatch_module_retvals
          vars:
            output_syspatch_module_retvals:
              reboot_needed: "{{ syspatch_module_retvals.reboot_needed }}"
              return_code: "{{ syspatch_module_retvals.rc }}"
              stderr: >
                {{ syspatch_module_retvals.stderr |
                  ansible.builtin.split('\n') }}
              stdout: >
                {{ syspatch_module_retvals.stdout |
                  ansible.builtin.split('\n') }}

        - name: Reboot the host if needed for the patching
          ansible.builtin.reboot:
          when: syspatch_module_retvals.reboot_needed

        - name: Update all installed packages
          community.general.openbsd_pkg:
            name: '*'
            state: latest

    - name: Create a dedicated user for configuration management operations
      block:
        - name: Create a group for the user
          ansible.builtin.group:
            name: "cm_group"

        - name: Create the user account
          ansible.builtin.user:
            name: "cm_user"
            group: "cm_group"
            comment: "Remote user for Ansible"
            password: '!' # locked

        - name: Add RTSA SSH key to user's list of authorized keys
          ansible.posix.authorized_key:
            user: cm_user
            key: "{{ lookup('file', '../terraform/rtsa_ssh_key.txt') }}"
