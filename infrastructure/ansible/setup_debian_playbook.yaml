---
- name: Perform the initial setup of the Debian webserver(s)
  hosts: debian
  vars:
    bastion_host_ipaddr: >-
      {{ lookup('community.general.dig', 'bastion.roadtosysadmin.net.') }}

  tasks:
    - name: Guard against direct playbook invocation on "null" inventory
      when: ansible_host_ipaddr is defined
      block:
        - name: Verify that the host was deployed via TF
          ansible.builtin.assert:
            that: "ansible_host_ipaddr != '169.254.254.169'"
            fail_msg: "has build_inventory_playbook.yaml been invoked already?"
            quiet: true
          register: host_is_deployed
          ignore_errors: true

        - name: The host is not deployed, will not attempt to set it up
          ansible.builtin.meta: end_host
          when: host_is_deployed.failed

    - name: Secure SSH access to the host via the firewall
      block:
        - name: Add rule allowing SSH access only from <bastion>
          community.general.ufw:
            name: OpenSSH
            from_ip: "{{ bastion_host_ipaddr }}"
            rule: allow

        - name: Remove default rule allowing SSH access from <any>
          community.general.ufw:
            from_ip: any
            to_port: 22
            proto: tcp
            rule: allow
            delete: true

    - name: Upgrade installed packages and install Nginx
      block:
        - name: Update the packages list
          ansible.builtin.apt:
            update_cache: true

        - name: Upgrade the installed packages
          ansible.builtin.apt:
            upgrade: safe

        - name: Install Nginx
          ansible.builtin.apt:
            pkg: nginx
            state: present

        - name: Ensure Nginx is not running yet
          ansible.builtin.systemd_service:
            name: nginx.service
            state: stopped

    - name: Set up the webserver and serve the website
      block:
        - name: Overwrite the default Nginx configuration
          ansible.builtin.copy:
            src: files/nginx.conf
            dest: /etc/nginx/nginx.conf
            backup: true
            validate: /usr/sbin/nginx -t -c %s

        - name: Create the webroot referenced by the conf
          ansible.builtin.file:
            path: /srv/www/html/rtsa_current
            state: directory
            group: www
            owner: www
            recurse: true

        - name: Archive and compress website files
          local_action:
            module: ansible.builtin.command
            chdir: "{{ playbook_dir }}/../../website/live/rtsa_current/"
            argv:
              - /usr/bin/tar
              - -czf
              - "{{ playbook_dir }}/files/rtsa_webroot_files.tar.gz"
              - .

        - name: Copy over and unpack the archive
          ansible.builtin.unarchive:
            src: "{{ playbook_dir }}/files/rtsa_webroot_files.tar.gz"
            dest: /srv/www/html/rtsa_current/
            group: www
            owner: www

        - name: Start and enable the Nginx systemd unit
          ansible.builtin.systemd_service:
            name: nginx.service
            state: started
            enabled: true

        - name: Add firewall rules allowing HTTP/HTTPS traffic from <any>
          community.general.ufw:
            name: Nginx Full
            from_ip: 0.0.0.0/0
            rule: allow

                #TODO: provide a custom sshd_config variant for Linux distros

              # - name: Configure sshd explicitly
              #   block:
              #     - name: Copy sshd_config over to the host and validate its syntax
              #       ansible.builtin.copy:
              #         src: files/sshd_config
              #         dest: /etc/ssh/sshd_config
              #         backup: true
              #         validate: /usr/sbin/sshd -t -f %s

              #     - name: Enable the new configuration
              #       ansible.builtin.service:
              #         name: sshd
              #         state: reloaded
...
